package project1;
import java.util.Random;

/**
 * A Account Number class for RU banking project that defines a unique 9-digit account number.
 * 9-digit code = 3-digit area code + 2-digit account type + 4-digit random number
 *
 * @author arpeet barvalia jonathanjohn
 */
public class AccountNumber implements Comparable<AccountNumber> {
    private static final int SEED = 9999;
    //for a fix sequence of random numbers.
    private Branch                branch;
    private AccountType             type;
    private String                number;
    //a 4-digit number generated by the Random object
    private static final Random random = new Random();

    /**
     * Creates a new account number with the following 2 parameters.
     *
     * @param branch the branch for the new AccountNumber object.
     * @param type the type for the new AccountNumber object.
     */
    public AccountNumber(Branch branch, AccountType type ){
        this.branch = branch;
        this.type = type;
        this.number = String.format( "%04d" , random.nextInt(10000));
        //4 digit number with leading zeroes instead of number from 1000-9999 for the serial number
    }

//Do we need another AccountNUmber constructor for changing account types or with only 1 parameter?

    public Branch getBranch(){
        return branch;
    }
    public AccountType getAccountType(){
        return type;
    }
    public String getSerialNumber(){
        return number;
    }


    @Override
    public boolean isEqual(Object obj){
        if( obj instanceof AccountNumber other ){
            return this.toString().equals(other.toString());
        }
        return false;
    }

    @Override
    public String toString(){
        return Branch.getBranchCode() + type.getCode() + number;
    }

    @Override
    public int compareTo(AccountNumber other){
        return this.toString().compareTo(other.toString());
    }








}






